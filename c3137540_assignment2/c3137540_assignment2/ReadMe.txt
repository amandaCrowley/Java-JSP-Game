-----------------------------
1. The application structure, i.e. relationships among objects etc.
-----------------------------
The first page of this application is aptly called firstPage.jsp 

The user may choose to either create a new game or load a saved game from file (if one exists). Once they have chosen using the form buttons on the page, the request information is submitted to the GameController servlet. The servlet uses the request information to make a new game or load a saved game from the saved games file. It then re-directs the user to the gamePage.jsp where the game information is displayed to the user.

Once on the gamePage the user clicks on a briefcase item, to progress through the game. Each time a briefcase is clicked a request object is sent to the GameController servlet in order change the briefcase from closed to open, calling methods from the DealGame.java bean which contains all of the game's attributes and logic/behviours e.g. openBriefcase(). 

The gamecontroller servlet also checks if the player is in an offer round (player has opened a certain amount of cases and the banker needs to offer the player a sum of money to entice them to quit the game). If the player is an offer round the servlet redirects the player to the DealPage.jsp instead of the gamePage. 

The DealPage displays the banker's offer to the user. They may select either deal or no deal using the form buttons on the page. Selecting no deal sends the request information back to the servlet, where the player is redirected to the gamepage in order to select more briefcases to open, until the next offer round.

Selecting deal ends the current game, sending the request information to the serlvet and setting the game's gameOver status. The user is then redirected back to the DealPage where the final amount won is displayed, as well as a link asking the user to play the game again. This link takes the player back to the first page to begin the process again. 

The servlet will also re-direct the player from the gamePage to the dealPage once only one briefcase remains. (i.e. game has finished and player has won the amount in the last briefcase) The dealPage will display the amount won and the play again link.

The player may choose to save the game using the save game button, located in the top right corner of the screen. This button is only available once the game has started (player is not on the firstPage.jsp) and becomes unavailable once the game has finished (player has accepted the deal or only 1 briefcase remains) When the button is clicked it sends a request object to the gameController servlet. The servlet then calls method from the DealGame bean in order to save the game's state to the savedGames.ser file.

--------------------------------
2. What is the purpose of each of your objects?
--------------------------------
The purpose of the firstPage.jsp object is to present the player with the entry point to the game. It also uses a form to retrieve the player's userName and to sends the request object generated by the form to the GameController servlet for processing.

The purpose of the GameController servlet object is to process all requests sent by the various JSP pages within this application.
It directs the flow of the application based on the choices made by the player and updates the session information as needed.

The purpose of the gamePage.jsp object is to present the player with the Deal or No Deal game board. It displays 12 briefcase icons
which change depending on their open status.

The purpose of the dealPage.jsp object is to present the player with the banker's current offer as well the form buttons in order to make this choice (Deal or No Deal). Once a selection has been chosen this request object is sent back to the GameController servlet for processing. In the event that the player has only one case remaining instead of displayed the form buttons it will display the amount won and a link back to the first page.

The purpose of the amountTable.jsp object is to present the player with a table displaying all values stored in the briefcases.
These values are colour coded depending on thier open status. This page is included in both the gamePage and dealPage JSPs.

The purpose of the Briefcase bean is to create a simple structure for each briefcase object. It has simple getter and setter attributes. Each Briefcase object has a caseID, amount and open status.

The purpose of the DealGame bean object is to define the attributes and behaviours each game has. (e.g. briefcases and their amounts etc.)  This class includes simple getter and setter methods used to set and retrieve the game's attributes as well as more complex business logic methods such as, saving and retrieving a game object or calculating and retrieving the monetary amount being offered to a player in an offer round. 

The purpose of the SessionListener object is to save a player's game object to file in the event that a player's session times out.
It implements the method - sessionDestroyed - which is called whenever a session is destroyed i.e. timeout or invalidated.
The session timeout duration is specified in the application's web.xml file. It is set to 1 minute.

------------------------------
3. How did you implement session tracking?
------------------------------
I used session objects to implement session tracking. A DealGame object (Which represents a player's game state) is stored in the session object. Each page retrieves this object and displays the relevant information.

The session is cleared/invalidated once the game is finished, ready for the next game.

------------------------------
4. How did you implement game saving?
------------------------------
The web server contains a file called savedGames.ser

This is a serialised file that can contain saved games of multiple users.
The DealGame class, which stores all of the attributes required to play a game, is a serialised class which enables the application to save the state of that game object to the savedGames file.

The player can click on the save game button after the game has started, and the save button is removed once the player has chosen to take the deal.
Clicking on the save game button ends the current session/game. Loading the saved game (on the first page) removes the saved game from the savedGames.ser file.

The player must enter a userName in order to start a new game. Once the game is saved the player may use this userName to load their saved game. Only one saved game per player.

----------------------------
5. Identify if you are an MIT student or an undergraduate student.
----------------------------
Undergraduate

----------------------------
6. The URL the marker needed to start the application
----------------------------
http://localhost:8080/c3137540_assignment2/firstPage.jsp

----------------------------
References (Images used in website)
----------------------------
Frizabela. (2007). Suitcase_Icon. [Image] Retrieved from https://commons.wikimedia.org/wiki/File:Suitcase_icon.JPG

free-icons-download.net. (n.d.). Computer briefcase icon. [Image] Retrieved from http://www.free-icons-download.net/computer-briefcase-icon-69814/


